import datetime
import sqlite3

import aiosqlite

from aiogram import F, Router, types
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import (Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, BufferedInputFile,
                           FSInputFile)
from aiogram.fsm.context import FSMContext
from openpyxl.styles import Alignment, Font

import states
import pandas as pd
import io
import db
from datetime import datetime
import logging

router = Router()
logger = logging.getLogger(__name__)
admin_kb= [
        [InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–æ–Ω–æ—Ä–æ–≤", callback_data='donor_edit')],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–æ—Ç–µ", callback_data='bot_edit')],
        [InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data='view_statistics')],
        [InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã", callback_data='reply_to_questions')],
        [InlineKeyboardButton(text="–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data='newsletter'),
         InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data='create_event')],
        [InlineKeyboardButton(text="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data='upload_statistics'),
         InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data='get_statistics')],
    ]

keyboard = InlineKeyboardMarkup(inline_keyboard=admin_kb)

"""
–î–≤–∞ —Ö–µ–Ω–¥–ª–µ—Ä–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —Å–æ –≤—Å–µ–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
"""
@router.message(Command('admin'), states.IsAdmin())
async def admin_command(message: Message) -> None:
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞!\n'
                         '–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=keyboard)

@router.callback_query(F.data == "admin_menu")
async def back_to_admin(callback: CallbackQuery):
    await callback.message.edit_text('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞!\n'
                         '–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=keyboard)




"""
–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å
"""
kb_edit_return = [
    [InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É", callback_data='edit_by_phone')],
    [InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –§–ò–û", callback_data='edit_by_name')],
    [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É", callback_data='delete_by_phone')],
    [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data='add_user')],
    [InlineKeyboardButton(text="–ò–º–ø–æ—Ä—Ç –∏–∑ Excel", callback_data='import_from_excel')],
    [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data='admin_menu')]
]
keyboard_edit_return = InlineKeyboardMarkup(inline_keyboard=kb_edit_return)


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class EditStates(StatesGroup):
    waiting_phone = State()
    waiting_name = State()
    waiting_delete_phone = State()
    waiting_excel = State()
    editing_field = State()


"""
–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""


@router.callback_query(F.data == "donor_edit")
async def donor_edit(callback: CallbackQuery):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:",
        reply_markup=keyboard_edit_return
    )


"""
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
"""


@router.callback_query(F.data == "edit_by_phone")
async def edit_by_phone_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    await state.set_state(EditStates.waiting_phone)
    await callback.answer()


@router.message(EditStates.waiting_phone)
async def edit_by_phone_process(message: Message, state: FSMContext):
    phone = message.text
    try:
        async with aiosqlite.connect(db.DATABASE_NAME) as con:
            cursor = await con.execute(
                "SELECT * FROM Donors WHERE Phone = ?",
                (phone,)
            )
            donor = await cursor.fetchone()

            if donor:
                await state.update_data(donor_id=donor[0])
                await show_donor_info(message, donor)
                await message.answer(
                    "–ö–∞–∫–æ–µ –ø–æ–ª–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
                    reply_markup=create_full_edit_keyboard(donor[0])
                )
            else:
                await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.set_state(EditStates.editing_field)


"""
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –§–ò–û
"""


@router.callback_query(F.data == "edit_by_name")
async def edit_by_name_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    await state.set_state(EditStates.waiting_name)
    await callback.answer()


@router.message(EditStates.waiting_name)
async def edit_by_name_process(message: Message, state: FSMContext):
    name = message.text
    try:
        async with aiosqlite.connect(db.DATABASE_NAME) as con:
            cursor = await con.execute(
                "SELECT * FROM Donors WHERE Name LIKE ?",
                (f"%{name}%",)
            )
            donors = await cursor.fetchall()

            if donors:
                if len(donors) > 1:
                    kb = []
                    for donor in donors:
                        kb.append([InlineKeyboardButton(
                            text=f"{donor[1]} ({donor[8]})",
                            callback_data=f"select_donor_{donor[0]}"
                        )])

                    await message.answer(
                        "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–≥–æ:",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
                    )
                else:
                    donor = donors[0]
                    await state.update_data(donor_id=donor[0])
                    await show_donor_info(message, donor)
                    await message.answer(
                        "–ö–∞–∫–æ–µ –ø–æ–ª–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
                        reply_markup=create_full_edit_keyboard(donor[0])
                    )
                    await state.set_state(EditStates.editing_field)
            else:
                await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ç–∞–∫–∏–º –§–ò–û –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞
"""


@router.callback_query(F.data.startswith("select_donor_"))
async def select_donor(callback: CallbackQuery, state: FSMContext):
    donor_id = int(callback.data.split("_")[2])
    try:
        async with aiosqlite.connect(db.DATABASE_NAME) as con:
            cursor = await con.execute(
                "SELECT * FROM Donors WHERE donorID = ?",
                (donor_id,)
            )
            donor = await cursor.fetchone()

            if donor:
                await state.update_data(donor_id=donor[0])
                await show_donor_info(callback.message, donor)
                await callback.message.answer(
                    "–ö–∞–∫–æ–µ –ø–æ–ª–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
                    reply_markup=create_full_edit_keyboard(donor[0])
                )
                await state.set_state(EditStates.editing_field)
            else:
                await callback.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
    finally:
        await callback.answer()


"""
–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–Ω–æ—Ä–µ
"""


async def show_donor_info(message: Message, donor):
    await message.answer(
        f"üîπ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>\n\n"
        f"<b>ID:</b> {donor[0]}\n"
        f"<b>–§–ò–û:</b> {donor[1]}\n"
        f"<b>–ì—Ä—É–ø–ø–∞:</b> {donor[2]}\n"
        f"<b>–ì–∞–≤—Ä–∏–ª–æ–≤–∞:</b> {'–î–∞' if donor[3] else '–ù–µ—Ç'}\n"
        f"<b>–§–ú–ë–ê:</b> {'–î–∞' if donor[4] else '–ù–µ—Ç'}\n"
        f"<b>–ü–æ—Å–ª–µ–¥–Ω—è—è –ì–∞–≤—Ä–∏–ª–æ–≤–∞:</b> {donor[5]}\n"
        f"<b>–ü–æ—Å–ª–µ–¥–Ω—è—è –§–ú–ë–ê:</b> {donor[6]}\n"
        f"<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b> {donor[7]}\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {donor[8]}\n"
        f"<b>–ß—É–∂–æ–π:</b> {'–î–∞' if donor[9] else '–ù–µ—Ç'}"
    )


"""
–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""


def create_full_edit_keyboard(donor_id):
    buttons = [
        [InlineKeyboardButton(text="–§–ò–û", callback_data=f"edit_field_name_{donor_id}")],
        [InlineKeyboardButton(text="–ì—Ä—É–ø–ø–∞", callback_data=f"edit_field_group_{donor_id}")],
        [InlineKeyboardButton(text="–ì–∞–≤—Ä–∏–ª–æ–≤–∞", callback_data=f"edit_field_gavrilova_{donor_id}")],
        [InlineKeyboardButton(text="–§–ú–ë–ê", callback_data=f"edit_field_fmba_{donor_id}")],
        [InlineKeyboardButton(text="–ü–æ—Å–ª–µ–¥–Ω—è—è –ì–∞–≤—Ä–∏–ª–æ–≤–∞", callback_data=f"edit_field_lastgav_{donor_id}")],
        [InlineKeyboardButton(text="–ü–æ—Å–ª–µ–¥–Ω—è—è –§–ú–ë–ê", callback_data=f"edit_field_lastfmba_{donor_id}")],
        [InlineKeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data=f"edit_field_contacts_{donor_id}")],
        [InlineKeyboardButton(text="–¢–µ–ª–µ—Ñ–æ–Ω", callback_data=f"edit_field_phone_{donor_id}")],
        [InlineKeyboardButton(text="–ß—É–∂–æ–π", callback_data=f"edit_field_stranger_{donor_id}")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="donor_edit")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π
"""


@router.callback_query(F.data.startswith("edit_field_"))
async def edit_field_start(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    field_name = parts[2]
    donor_id = int(parts[3])

    await state.update_data(editing_field=field_name, donor_id=donor_id)

    field_descriptions = {
        "name": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û:",
        "group": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É:",
        "gavrilova": "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ì–∞–≤—Ä–∏–ª–æ–≤–∞ (1 - –¥–∞, 0 - –Ω–µ—Ç):",
        "fmba": "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –§–ú–ë–ê (1 - –¥–∞, 0 - –Ω–µ—Ç):",
        "lastgav": "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –ì–∞–≤—Ä–∏–ª–æ–≤–∞:",
        "lastfmba": "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –§–ú–ë–ê:",
        "contacts": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã:",
        "phone": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:",
        "stranger": "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ß—É–∂–æ–π (1 - –¥–∞, 0 - –Ω–µ—Ç):"
    }

    await callback.message.answer(field_descriptions[field_name])
    await state.set_state(EditStates.editing_field)
    await callback.answer()


@router.message(EditStates.editing_field)
async def edit_field_process(message: Message, state: FSMContext):
    data = await state.get_data()
    field_name = data['editing_field']
    donor_id = data['donor_id']
    new_value = message.text

    try:
        # –î–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        if field_name in ['gavrilova', 'fmba', 'stranger']:
            new_value = 1 if new_value.lower() in ['1', '–¥–∞', 'yes', 'true'] else 0

        async with aiosqlite.connect(db.DATABASE_NAME) as con:
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞
            await con.execute(
                f"UPDATE Donors SET {field_name.capitalize()} = ? WHERE donorID = ?",
                (new_value, donor_id)
            )
            await con.commit()

            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            cursor = await con.execute(
                "SELECT * FROM Donors WHERE donorID = ?",
                (donor_id,)
            )
            donor = await cursor.fetchone()

            await message.answer("‚úÖ –ü–æ–ª–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            await show_donor_info(message, donor)
            await message.answer(
                "–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ—â—ë —á—Ç–æ-—Ç–æ?",
                reply_markup=create_full_edit_keyboard(donor_id)
            )

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}")

    await state.update_data(editing_field=None)


"""
–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
"""


@router.callback_query(F.data == "delete_by_phone")
async def delete_by_phone_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await state.set_state(EditStates.waiting_delete_phone)
    await callback.answer()


@router.message(EditStates.waiting_delete_phone)
async def delete_by_phone_process(message: Message, state: FSMContext):
    phone = message.text
    try:
        async with aiosqlite.connect(db.DATABASE_NAME) as con:
            cursor = await con.execute(
                "SELECT Name FROM Donors WHERE Phone = ?",
                (phone,)
            )
            donor = await cursor.fetchone()

            if donor:
                await con.execute(
                    "DELETE FROM Donors WHERE Phone = ?",
                    (phone,)
                )
                await con.commit()
                await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {donor[0]} —É–¥–∞–ª—ë–Ω.")
            else:
                await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}")
    finally:
        await state.clear()


"""
–ò–º–ø–æ—Ä—Ç –∏–∑ Excel
"""


@router.callback_query(F.data == "import_from_excel")
async def import_from_excel_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
        "–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ–ª—è–º —Ç–∞–±–ª–∏—Ü—ã Donors."
    )
    await state.set_state(EditStates.waiting_excel)
    await callback.answer()


@router.message(EditStates.waiting_excel, F.document)
async def import_from_excel_process(message: Message, state: FSMContext):
    try:
        file = await message.bot.get_file(message.document.file_id)
        file_path = await message.bot.download_file(file.file_path)

        # –ß–∏—Ç–∞–µ–º Excel —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        df = pd.read_excel(file_path, dtype={
            'Phone': str,
            'LastGavrilov': str,
            'LastFMBA': str,
            'GroupID': str
        })

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
        df['Name'] = df['Name'].str.strip()
        df['Phone'] = df['Phone'].apply(clean_phone_number)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ GroupID - –ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –∑–∞–≥–ª–∞–≤–Ω–∞—è, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ—á–Ω—ã–µ
        df['GroupID'] = df['GroupID'].str.strip().str.capitalize()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç
        date_columns = ['LastGavrilov', 'LastFMBA']
        for col in date_columns:
            if col in df.columns:
                df[col] = df[col].apply(format_date)

        required_columns = ['Name', 'Phone']
        if not all(col in df.columns for col in required_columns):
            raise ValueError("–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏ 'Name' –∏ 'Phone'")

        async with aiosqlite.connect(db.DATABASE_NAME) as con:
            for _, row in df.iterrows():
                await con.execute(
                    """INSERT OR REPLACE INTO Donors 
                    (Name, GroupID, Gavrilova, FMBA, LastGavrilov, LastFMBA, Contacts, Phone, Stranger) 
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)""",
                    (
                        row.get('Name'),
                        row.get('GroupID', ''),
                        int(row.get('Gavrilova', 0)),
                        int(row.get('FMBA', 0)),
                        row.get('LastGavrilov', ''),
                        row.get('LastFMBA', ''),
                        row.get('Contacts', ''),
                        row['Phone'],
                        int(row.get('Stranger', 0))
                    )
                )
            await con.commit()

        await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(df)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {str(e)}")
    finally:
        await state.clear()


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def clean_phone_number(phone):
    """–ü—Ä–∏–≤–æ–¥–∏—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫ —Ñ–æ—Ä–º–∞—Ç—É +79858920529"""
    if pd.isna(phone):
        return ''

    phone = str(phone)
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    digits = ''.join(filter(str.isdigit, phone))

    # –î–æ–±–∞–≤–ª—è–µ–º +7 –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤
    if digits.startswith('7') and len(digits) == 11:
        return f"+{digits}"
    elif digits.startswith('8') and len(digits) == 11:
        return f"+7{digits[1:]}"
    else:
        return f"+{digits}" if digits else ''


def format_date(date_str):
    """–ü—Ä–∏–≤–æ–¥–∏—Ç –¥–∞—Ç—É –∫ —Ñ–æ—Ä–º–∞—Ç—É dd-mm-yyyy"""
    if pd.isna(date_str) or not str(date_str).strip():
        return ''

    date_str = str(date_str).strip()

    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç
        if '-' in date_str and len(date_str.split('-')[0]) == 2:
            # –£–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd-mm-yyyy
            return date_str

        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏–∑ –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        date_formats = [
            '%Y-%m-%d', '%d.%m.%Y', '%d/%m/%Y',
            '%d%m%Y', '%Y%m%d', '%d-%b-%y'
        ]

        for fmt in date_formats:
            try:
                dt = datetime.strptime(date_str, fmt)
                return dt.strftime('%d-%m-%Y')
            except ValueError:
                continue

        return date_str  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
    except:
        return date_str  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ


"""
–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –æ–¥–Ω–æ–º—É –∏–ª–∏ —Å–ø–∏—Å–∫–æ–º. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É Donors
"""
@router.callback_query(F.data == 'add_user')
async def start_add_donors(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–Ω–æ—Ä–æ–≤ (–∫–∞–∂–¥–∞—è –∑–∞–ø–∏—Å—å —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):\n"
        "–§–æ—Ä–º–∞—Ç: –§–∞–º–∏–ª–∏—è,–ò–º—è,–û—Ç—á–µ—Å—Ç–≤–æ,–°–æ—Ç—Ä—É–¥–Ω–∏–∫/–ì—Ä—É–ø–ø–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞,–¢–µ–ª–µ—Ñ–æ–Ω\n"
        "–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):\n"
        "–±–∞–ª–ª—ã –ì–∞–≤—Ä–∏–ª–æ–≤–∞,–±–∞–ª–ª—ã FMBA,–ü–æ—Å–ª–µ–¥–Ω—è—è –¥–æ—Ç–∞—Ü–∏—è –≤ —Ü–µ–Ω—Ç—Ä–µ –ì–∞–≤—Ä–∏–ª–æ–≤–∞,\n"
        "–ü–æ—Å–ª–µ–¥–Ω—è—è –¥–æ—Ç–∞—Ü–∏—è –≤ —Ü–µ–Ω—Ç—Ä–µ FMBA,–ö–æ–Ω—Ç–∞–∫—Ç—ã,–í–Ω–µ—à–Ω–∏–π –¥–æ–Ω–æ—Ä(0 - –Ω–µ—Ç/1 - –¥–∞)\n"
        "–¢–≥ –∞–π–¥–∏\n\n"
        "–ü—Ä–∏–º–µ—Ä –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\n"
        "–ò–≤–∞–Ω–æ–≤,–ò–≤–∞–Ω,–ò–≤–∞–Ω–æ–≤–∏—á,–°–æ—Ç—Ä—É–¥–Ω–∏–∫,+79161234567\n\n"
        "–ü—Ä–∏–º–µ—Ä –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\n"
        "–ü–µ—Ç—Ä–æ–≤,–ü—ë—Ç—Ä,–ü–µ—Ç—Ä–æ–≤–∏—á,–°–æ—Ç—Ä—É–¥–Ω–∏–∫,+79261234567,0,1,,2023-02-20,—Ç–µ–ª.123-456,0,1194604421"
    )
    await state.set_state(states.AddDonorsState.waiting_for_text)

@router.message(states.AddDonorsState.waiting_for_text)
async def handle_text_list(message: Message, state: FSMContext):
    lines = message.text.split('\n')
    added = 0

    async with aiosqlite.connect(db.DATABASE_NAME) as con, con.cursor() as cur:
        for i, line in enumerate(lines, 1):
            try:
                if not line.strip():
                    continue

                parts = [p.strip() for p in line.split(',')]
                print(parts)
                if len(parts) >= 3:
                    full_name = ' '.join(parts[:3])  # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ñ–∞–º–∏–ª–∏—é, –∏–º—è –∏ –æ—Ç—á–µ—Å—Ç–≤–æ
                    group_id = parts[3]
                    phone = parts[4]

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
                    gavrilova = int(parts[5]) if len(parts) > 5 and parts[5] else 0
                    fmba = int(parts[6]) if len(parts) > 6 and parts[6] else 0
                    last_gavrilov = parts[7] if len(parts) > 7 else None
                    last_fmba = parts[8] if len(parts) > 8 else None
                    contacts = parts[9] if len(parts) > 9 else None
                    stranger = int(parts[10]) if len(parts) > 10 and parts[10] else 0
                    donorID = int(parts[11]) if len(parts) > 11 and parts[11] else 0

                    await con.execute(
                        """INSERT OR REPLACE INTO Donors
                        (Name, GroupID, Phone,
                         Gavrilova, FMBA, LastGavrilov, LastFMBA, Contacts, Stranger, donorID)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)""",
                        (full_name, group_id, phone,
                         gavrilova, fmba, last_gavrilov, last_fmba, contacts, stranger, donorID)
                    )
                    added += 1
            except Exception:
                continue

        await con.commit()

    await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {added} –¥–æ–Ω–æ—Ä–æ–≤")
    await state.clear()


kb_return = [
    [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data='admin_menu')]
]
keyboard_return = InlineKeyboardMarkup(inline_keyboard=kb_return)


"""
–ò–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ (–∑–∞–≥–ª—É—à–∫–∞)
"""
@router.callback_query(F.data == "bot_edit")
async def donor_edit(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å",
                                     reply_markup=keyboard_return)

"""
–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ –¥–∞—Ç—É –∏ —Ç–µ—Ö –∫—Ç–æ —Å–¥–∞–ª –∫—Ä–æ–≤—å.
–¢–∞–∫–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç exel —Ñ–∞–π–ª
"""
@router.callback_query(F.data == "view_statistics")
async def donor_edit(callback: CallbackQuery):
    try:
        async with aiosqlite.connect(db.DATABASE_NAME) as conn:
            # –ó–∞–ø—Ä–æ—Å —Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞—Ç
            query = """
                SELECT 
                    dd.Date AS dd_date,
                    dd.donor_center AS center,
                    COUNT(dd_data.donorID) AS total_registrations,
                    SUM(CASE WHEN dd_data.complete = 1 THEN 1 ELSE 0 END) AS completed_donations
                FROM DD dd
                LEFT JOIN donors_data dd_data ON 
                    -- –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –∏–∑ DD –≤ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                    CASE 
                        WHEN length(dd.Date) = 8 THEN 
                            substr(dd.Date, 5, 4) || '-' || substr(dd.Date, 3, 2) || '-' || substr(dd.Date, 1, 2)
                        WHEN length(dd.Date) = 10 AND dd.Date LIKE '__-__-____' THEN 
                            substr(dd.Date, 7, 4) || '-' || substr(dd.Date, 4, 2) || '-' || substr(dd.Date, 1, 2)
                        ELSE dd.Date
                    END = dd_data.Date
                GROUP BY dd.Date, dd.donor_center
                ORDER BY 
                    CASE 
                        WHEN length(dd.Date) = 8 THEN 
                            substr(dd.Date, 5, 4) || substr(dd.Date, 3, 2) || substr(dd.Date, 1, 2)
                        WHEN length(dd.Date) = 10 AND dd.Date LIKE '__-__-____' THEN 
                            substr(dd.Date, 7, 4) || substr(dd.Date, 4, 2) || substr(dd.Date, 1, 2)
                        ELSE dd.Date
                    END DESC,
                    dd.donor_center
                """

            cursor = await conn.execute(query)
            stats = await cursor.fetchall()

            if not stats:
                await callback.message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ–Ω–æ—Ä—Å–∫–∏—Ö –∞–∫—Ü–∏—è—Ö")
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
            report = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–æ–Ω–æ—Ä—Å–∫–∏–º –∞–∫—Ü–∏—è–º:\n\n"
            report += "–î–∞—Ç–∞       | –¶–µ–Ω—Ç—Ä      | –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π | –ó–∞–≤–µ—Ä—à–µ–Ω–æ\n"
            report += "-----------------------------------------------\n"

            current_date = None
            for row in stats:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏–∑ DD (–∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)
                raw_date = row[0]
                try:
                    if len(raw_date) == 8 and raw_date.isdigit():  # –§–æ—Ä–º–∞—Ç –î–î–ú–ú–ì–ì–ì–ì
                        formatted_date = f"{raw_date[:2]}.{raw_date[2:4]}.{raw_date[4:]}"
                    elif len(raw_date) == 10 and '-' in raw_date:  # –§–æ—Ä–º–∞—Ç –î–î-–ú–ú-–ì–ì–ì–ì
                        formatted_date = raw_date.replace('-', '.')
                    else:
                        formatted_date = raw_date
                except:
                    formatted_date = raw_date

                # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
                if current_date != row[0]:
                    current_date = row[0]
                    report += "\n"

                report += (f"{formatted_date.ljust(10)} | {str(row[1]).ljust(10)} | "
                           f"{str(row[2]).center(11)} | {row[3]}\n")

            # –°–æ–∑–¥–∞–µ–º Excel-–æ—Ç—á–µ—Ç
            excel_buffer = io.BytesIO()

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –¥–ª—è Excel
            excel_data = []
            for row in stats:
                raw_date = row[0]
                try:
                    if len(raw_date) == 8 and raw_date.isdigit():  # –§–æ—Ä–º–∞—Ç –î–î–ú–ú–ì–ì–ì–ì
                        excel_date = f"{raw_date[:2]}.{raw_date[2:4]}.{raw_date[4:]}"
                    elif len(raw_date) == 10 and '-' in raw_date:  # –§–æ—Ä–º–∞—Ç –î–î-–ú–ú-–ì–ì–ì–ì
                        excel_date = raw_date.replace('-', '.')
                    else:
                        excel_date = raw_date
                except:
                    excel_date = raw_date

                excel_data.append([excel_date, row[1], row[2], row[3]])

            df = pd.DataFrame(excel_data, columns=['Date', '–¶–µ–Ω—Ç—Ä', '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'])
            df.to_excel(excel_buffer, index=False, engine='openpyxl')
            excel_buffer.seek(0)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
            await callback.message.answer(report)
            await callback.message.answer_document(
                BufferedInputFile(
                    excel_buffer.getvalue(),
                    filename="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞_–∞–∫—Ü–∏–π.xlsx"
                ),
                caption="–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–∑–∞–≤–µ—Ä—à–µ–Ω–æ)"
            )

    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
    finally:
        await callback.answer()


"""
–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∑–∞–≥–ª—É—à–∫–∞)
"""
@router.callback_query(F.data == "reply_to_questions")
async def donor_edit(callback: CallbackQuery):
    await callback.message.edit_text("–í–æ–ø—Ä–æ—Å:",
                                     reply_markup=keyboard_return)

"""
–†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –¥–æ–Ω–∞—Ü–∏—é
"""
@router.callback_query(F.data == "newsletter")
async def newsletter_menu(callback: types.CallbackQuery):
    buttons = [
        [types.InlineKeyboardButton(
            text="–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –î–î",
            callback_data="newsletter_nearest"
        )],
        [types.InlineKeyboardButton(
            text="–ù–∞–∑–∞–¥",
            callback_data="admin_menu"
        )]
    ]

    await callback.message.edit_text(
        text="<b>–ú–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:",
        parse_mode="HTML",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await callback.answer()

@router.callback_query(F.data == "newsletter_nearest")
async def newsletter_nearest_dd(callback: types.CallbackQuery, state: FSMContext):
    nearest_date = await get_nearest_future_date()
    if not nearest_date:
        await callback.message.edit_text(
            text="‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="newsletter")]
            ]))
        return

    recipients = await get_recipients_for_date(nearest_date)
    if not recipients:
        await callback.message.edit_text(
            text=f"‚ùå –ù–∞ {nearest_date} –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="newsletter")]
            ]))
        return
    await state.update_data(
        newsletter_date=nearest_date,
        recipient_ids=recipients
    )
    await state.set_state(states.NewsletterStates.waiting_for_message)

    await callback.message.edit_text(
        text=f"üìÖ –ë–ª–∏–∂–∞–π—à–∏–π –î–î: <b>{nearest_date}</b>\n"
             f"üë• –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: <b>{len(recipients)}</b> —á–µ–ª–æ–≤–µ–∫\n\n"
             "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
        parse_mode="HTML",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="newsletter")]
        ])
    )
    await callback.answer()

@router.message(states.NewsletterStates.waiting_for_message, F.text)
async def process_newsletter_message(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if not data.get('recipient_ids'):
        await message.answer("‚ùå –ù–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return

    try:
        sent_count = 0
        for user_id in data['recipient_ids']:
            try:
                await message.bot.send_message(
                    chat_id=user_id,
                    text=message.text
                )
                sent_count += 1
                await  datetime.time.sleep(0.1)
            except Exception as e:
                logger.error(f"Error sending to {user_id}: {e}")

        await message.answer(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"–î–∞—Ç–∞: <b>{data['newsletter_date']}</b>\n"
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{sent_count}/{len(data['recipient_ids'])}</b>",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Newsletter error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ")
    finally:
        await state.clear()

@router.message(Command("cancel"))
async def cancel_newsletter(message: types.Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.clear()
    await message.answer(
        "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=types.ReplyKeyboardRemove()
    )


"""
–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É DD
"""
@router.callback_query(F.data == "create_event")
async def create_event(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (dd-mm-yyyy) –∏ "
                                     "—Ü–µ–Ω—Ç—Ä –∫—Ä–æ–≤–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n"
                                     "–ö–∞–∂–¥–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ—á–∫–µ\n"
                                     "–ü—Ä–∏–º–µ—Ä:\n"
                                     "24-03-2024,–ì–∞–≤—Ä–∏–ª–æ–≤–∞",
                                     reply_markup=keyboard_return)
    await state.set_state(states.EventState.waiting_for_event)

@router.message(states.EventState.waiting_for_event)
async def select_donor_field(message: Message, state: FSMContext):
    lines = message.text.split('\n')
    added = 0

    async with aiosqlite.connect(db.DATABASE_NAME) as con, con.cursor() as cur:
        for i, line in enumerate(lines, 1):
            try:
                if not line.strip():
                    continue

                parts = [p.strip() for p in line.split(',')]
                if len(parts) >= 2:
                    date = parts[0]
                    donor_center = parts[1]

                    await con.execute(
                        """INSERT OR REPLACE INTO DD
                        (Date, donor_center)
                        VALUES (?, ?)""",
                        (date, donor_center)
                    )
                    added += 1
            except Exception:
                continue

        await con.commit()

    await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {added} —Å–æ–±—ã—Ç–∏–π")
    await state.clear()



"""
–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É Donors_date —á–µ—Ä–µ–∑ exel —Ñ–∞–π–ª
"""
@router.callback_query(F.data == "upload_statistics")
async def donor_edit(callback: CallbackQuery, state: FSMContext):
    # –ü—É—Ç—å –∫ –≤–∞—à–µ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø—É—Ç—å)
    image_path = r"images/upload_stat.jpg"

    try:
        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
        photo = FSInputFile(image_path)
        await callback.message.answer_photo(
            photo,
            caption="–ü—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.\n"
                    "–¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è –≤—Å–µ —Å—Ç–æ–ª–±—Ü—ã"
        )

        # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback.message.answer(
            "–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel.\n"
            "–ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã —Ñ–æ—Ä–º–∞—Ç–∞ .xlsx –∏ .xls\n",
            reply_markup=keyboard_return
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(states.DocumentState.waiting_for_document)

    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {str(e)}")
        await callback.message.answer(
            "–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel",
            reply_markup=keyboard_return
        )
        await state.set_state(states.DocumentState.waiting_for_document)

    finally:
        await callback.answer()


@router.message(states.DocumentState.waiting_for_document, F.document)
async def handle_excel_document(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ Excel-—Ñ–∞–π–ª
    if not message.document.file_name.endswith(('.xlsx', '.xls', 'XLSX')):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx –∏–ª–∏ .xls)")
        return

    try:
        file_bytes = await message.bot.download(message.document, destination=io.BytesIO())
        file_bytes.seek(0)

        try:
            df = pd.read_excel(file_bytes)
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Excel-—Ñ–∞–π–ª–∞: {str(e)}")
            return

        required_columns = ['–§–ò–û', '–î–∞—Ç–∞ –∞–∫—Ü–∏–∏', '–¶–ö', '–°—Ç–∞—Ç—É—Å', '–¢–∏–ø', '–ó–∞–≤–µ—Ä—à–µ–Ω–æ']
        if not all(col in df.columns for col in required_columns):
            missing = set(required_columns) - set(df.columns)
            await message.answer(f"–í —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing)}")
            return

        async with aiosqlite.connect(db.DATABASE_NAME) as conn:
            total_added = 0
            errors = []

            for index, row in df.iterrows():
                try:
                    # –û—á–∏—â–∞–µ–º –§–ò–û –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
                    name = str(row['–§–ò–û']).strip()

                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É
                    date_str = pd.to_datetime(row['–î–∞—Ç–∞ –∞–∫—Ü–∏–∏']).strftime('%Y-%m-%d')

                    # –ò—â–µ–º –¥–æ–Ω–æ—Ä–∞ –≤ –±–∞–∑–µ
                    cursor = await conn.execute(
                        "SELECT donorID FROM Donors WHERE Name = ?",
                        (name,)
                    )
                    donor = await cursor.fetchone()
                    if not donor:
                        errors.append(f"–î–æ–Ω–æ—Ä {name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
                        continue

                    donor_id = donor[0]

                    # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ, –≤–∫–ª—é—á–∞—è –∏–º—è
                    await conn.execute(
                        """INSERT OR REPLACE INTO donors_data 
                        (Date, donorID, Name, donor_status, donor_type, complete)
                        VALUES (?, ?, ?, ?, ?, ?)""",
                        (
                            date_str,
                            donor_id,
                            name,  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –≤ –∑–∞–ø—Ä–æ—Å
                            int(row['–°—Ç–∞—Ç—É—Å']),
                            int(row['–¢–∏–ø']),
                            int(row['–ó–∞–≤–µ—Ä—à–µ–Ω–æ'])
                        )
                    )
                    total_added += 1

                except Exception as e:
                    errors.append(f"–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {index + 1}: {str(e)}")
                    continue

            await conn.commit()

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {total_added} –∑–∞–ø–∏—Å–µ–π"
            if errors:
                report += f"\n\n–û—à–∏–±–∫–∏ ({len(errors)}):\n" + "\n".join(errors[:5])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫

            await message.answer(report)

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")

kb_stat = [
    [InlineKeyboardButton(text='–°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π', callback_data='export_dd' )],
    [InlineKeyboardButton(text='–°–ø–∏—Å–æ–∫ –¥–æ–Ω–æ—Ä–æ–≤', callback_data='export_donors' )],
    [InlineKeyboardButton(text='–°–ø–∏—Å–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–æ–±—ã—Ç–∏–µ', callback_data='export_donors_date' )],
    [InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data='admin_menu')],
]
keyboard_stat = InlineKeyboardMarkup(inline_keyboard=kb_stat)

"""
–•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü DD, Donors, donors_data
"""
@router.callback_query(F.data == "get_statistics")
async def donor_edit(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",
                                     reply_markup=keyboard_stat)


@router.callback_query(F.data == 'export_dd')
async def export_dd_table(callback: CallbackQuery):
    try:
        async with aiosqlite.connect(db.DATABASE_NAME) as conn:
            # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å aiosqlite
            cursor = await conn.execute("SELECT * FROM DD")
            rows = await cursor.fetchall()
            columns = [desc[0] for desc in cursor.description]

            # –°–æ–∑–¥–∞–µ–º DataFrame
            dd_df = pd.DataFrame(rows, columns=columns)

            # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
            excel_buffer = io.BytesIO()
            with pd.ExcelWriter(excel_buffer, engine='openpyxl') as writer:
                dd_df.to_excel(writer, index=False, sheet_name='–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')
            excel_buffer.seek(0)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            await callback.message.answer_document(
                BufferedInputFile(
                    excel_buffer.getvalue(),
                    filename="–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.xlsx"
                ),
                caption="–°–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"
            )

    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: {str(e)}")
    finally:
        await callback.answer()


@router.callback_query(F.data == 'export_donors')
async def export_donors_table(callback: CallbackQuery):
    try:
        async with aiosqlite.connect(db.DATABASE_NAME) as conn:
            cursor = await conn.execute("SELECT * FROM Donors")
            rows = await cursor.fetchall()
            columns = [desc[0] for desc in cursor.description]

            donors_df = pd.DataFrame(rows, columns=columns)

            excel_buffer = io.BytesIO()
            with pd.ExcelWriter(excel_buffer, engine='openpyxl') as writer:
                donors_df.to_excel(writer, index=False, sheet_name='–î–æ–Ω–æ—Ä—ã')
            excel_buffer.seek(0)

            await callback.message.answer_document(
                BufferedInputFile(
                    excel_buffer.getvalue(),
                    filename="–î–æ–Ω–æ—Ä—ã.xlsx"
                ),
                caption="–°–ø–∏—Å–æ–∫ –¥–æ–Ω–æ—Ä–æ–≤"
            )

    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–æ–Ω–æ—Ä–æ–≤: {str(e)}")
    finally:
        await callback.answer()


@router.callback_query(F.data == 'export_donors_date')
async def export_donors_by_date(callback: CallbackQuery):
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç
        async with aiosqlite.connect(db.DATABASE_NAME) as conn:
            cursor = await conn.execute("SELECT DISTINCT Date FROM DD ORDER BY Date DESC")
            dates = await cursor.fetchall()

            if not dates:
                await callback.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π")
                return

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∞—Ç–∞–º–∏
            kb_dates = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=date[0], callback_data=f"export_date_{date[0]}")]
                for date in dates
            ])

            await callback.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:",
                reply_markup=kb_dates
            )

    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞—Ç: {str(e)}")
    finally:
        await callback.answer()


@router.callback_query(F.data.startswith("export_date_"))
async def export_for_selected_date(callback: CallbackQuery):
    try:
        selected_date = callback.data.split("_")[2]

        async with aiosqlite.connect(db.DATABASE_NAME) as conn:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
            event_cursor = await conn.execute(
                "SELECT donor_center FROM DD WHERE Date = ?",
                (selected_date,)
            )
            event_info = await event_cursor.fetchone()

            if not event_info:
                await callback.message.answer(f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞ {selected_date} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return

            event_name = event_info[0]

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ donors_data
            try:
                date_obj = datetime.strptime(selected_date, "%d-%m-%Y")
                db_date = date_obj.strftime("%Y-%m-%d")
            except ValueError:
                await callback.message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î-–ú–ú-–ì–ì–ì–ì")
                return

            # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –≤–∫–ª—é—á–µ–Ω–∏–µ–º —Å—Ç–∞—Ç—É—Å–∞ Complete
            query = """
            SELECT 
                d.*,
                dd.complete AS –°—Ç–∞—Ç—É—Å
            FROM Donors d
            JOIN donors_data dd ON d.donorID = dd.donorID
            WHERE dd.Date = ?
            """
            cursor = await conn.execute(query, (db_date,))
            rows = await cursor.fetchall()

            if not rows:
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
                alt_cursor = await conn.execute(query, (selected_date,))
                alt_rows = await alt_cursor.fetchall()

                if not alt_rows:
                    await callback.message.answer(
                        f"–ù–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ '{event_name}' ({selected_date}) –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ–Ω–æ—Ä–æ–≤"
                    )
                    return
                rows = alt_rows

            columns = [desc[0] for desc in cursor.description]

            # –°–æ–∑–¥–∞–µ–º DataFrame –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞—Ç—É—Å –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
            df = pd.DataFrame(rows, columns=columns)
            df['–°—Ç–∞—Ç—É—Å'] = df['–°—Ç–∞—Ç—É—Å'].apply(lambda x: '–î–∞' if x == 1 else '–ù–µ—Ç')

            # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            excel_buffer = io.BytesIO()
            with pd.ExcelWriter(excel_buffer, engine='openpyxl') as writer:
                df.to_excel(writer, index=False, sheet_name='–î–æ–Ω–æ—Ä—ã')

                # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –ª–∏—Å—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                worksheet = writer.sheets['–î–æ–Ω–æ—Ä—ã']

                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
                worksheet.cell(row=1, column=len(columns) + 1, value=f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event_name}")
                worksheet.cell(row=2, column=len(columns) + 1, value=f"–î–∞—Ç–∞: {selected_date}")

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                for col in worksheet.iter_cols(min_row=1, max_row=1):
                    for cell in col:
                        cell.font = Font(bold=True)
                        cell.alignment = Alignment(horizontal='center')

                # –ê–≤—Ç–æ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
                for column_cells in worksheet.columns:
                    length = max(len(str(cell.value)) for cell in column_cells)
                    worksheet.column_dimensions[column_cells[0].column_letter].width = length + 2

            excel_buffer.seek(0)

            await callback.message.answer_document(
                BufferedInputFile(
                    excel_buffer.getvalue(),
                    filename=f"–°–ø–∏—Å–æ–∫_–¥–æ–Ω–æ—Ä–æ–≤_{selected_date.replace('-', '_')}.xlsx"
                ),
                caption=f"–°–ø–∏—Å–æ–∫ –¥–æ–Ω–æ—Ä–æ–≤ –Ω–∞ {selected_date} ({event_name})\n–°—Ç–∞—Ç—É—Å: '–î–∞' - –¥–æ–Ω–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, '–ù–µ—Ç' - –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
            )

    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}")
    finally:
        await callback.answer()


async def get_nearest_future_date():
    try:
        conn = sqlite3.connect(db.DATABASE_NAME)
        cursor = conn.cursor()

        cursor.execute("SELECT date FROM DD")
        all_dates = [row[0] for row in cursor.fetchall()]

        future_dates = []
        current_date = datetime.now()

        for date_str in all_dates:
            try:
                date_obj = datetime.strptime(date_str, "%d-%m-%Y")
                if date_obj > current_date:
                    future_dates.append((date_obj, date_str))  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ–±—ä–µ–∫—Ç, –∏ —Å—Ç—Ä–æ–∫—É
            except ValueError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã {date_str}: {e}")

        if not future_dates:
            return None

        nearest_date_obj, nearest_date_str = min(future_dates, key=lambda x: x[0])
        return nearest_date_str

    except Exception as e:
        logger.error(f"Error getting nearest date: {e}")
        return None
    finally:
        if 'conn' in locals():
            conn.close()


async def get_recipients_for_date(date_str):
    try:
        conn = sqlite3.connect(db.DATABASE_NAME)
        cursor = conn.cursor()

        cursor.execute("""
            SELECT donorID FROM donors_data 
            WHERE Data = ?
        """, (date_str,))

        return [row[0] for row in cursor.fetchall()]
    except Exception as e:
        logger.error(f"Error getting recipients: {e}")
        return []
    finally:
        if 'conn' in locals():
            conn.close()


async def get_recipients_for_date(date):
    try:
        conn = sqlite3.connect(db.DATABASE_NAME)
        cursor = conn.cursor()

        cursor.execute("""
            SELECT donorID FROM donors_data 
            WHERE Date = ?
        """, (date,))

        return [row[0] for row in cursor.fetchall()]
    except Exception as e:
        logger.error(f"Error getting recipients: {e}")
        return []
    finally:
        if 'conn' in locals():
            conn.close()
